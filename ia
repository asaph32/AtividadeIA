import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import scipy as scp
import warnings
warnings.filterwarnings("ignore")

df = pd.read_csv('C://Users//filip//OneDrive//Área de Trabalho//Lipe_1//Mushroom dataset//mushrooms.csv',engine='python', sep=',')
df.head()
df.describe()
def distribuicao (data):
    num_unique_labels = data.apply(pd.Series.nunique)
    num_unique_labels.plot( kind='bar')
    plt.xlabel('Campos')
    plt.ylabel('Número de Registros únicos')
    plt.title('Distribuição de dados únicos do DataSet')
    plt.show()
distribuicao(df)

e = pd.value_counts(df['class']) [0]
p = pd.value_counts(df['class']) [1]

tam = len(df)

print('Cogumelos Comestiveis: ',e)
print('Cogumelos Venenosos: ',p )

pie = pd.DataFrame([['Comestivel',e],['Venenoso',p]],columns=['Tipo' , 'Quantidade'])


def pie_chart(data,col1,col2,title): 
    labels = {'Comestivel':0,'Venenoso':1}
    sizes = data[col2]
    colors = ['#e5ffcc', '#ffb266']

    plt.pie(sizes, labels=labels, colors=colors,
                autopct='%1.1f%%', shadow=True, startangle=140, labeldistance =1.2)
    plt.title( title )
    
    plt.axis('equal')
    plt.show()

pie_chart(pie,'Tipo' , 'Quantidade','Distribuição Percentual Classes de Cogumelos')


plt.bar(pie.Tipo,pie.Quantidade, color = ['#e5ffcc', '#ffb266'])
plt.title("Distribuição das Classes de Cogumelos")
plt.xlabel("Tipo de Cogumelo")
plt.ylabel('Quantidade de Registros')
plt.show()

X = df.drop('class', axis=1)
y = df['class']

X.head()
from sklearn.preprocessing import OneHotEncoder
Oht_enc = OneHotEncoder()
X = pd.DataFrame(Oht_enc.fit_transform(X).A)

X.shape

from sklearn.model_selection import train_test_split 
X_train,X_test,y_train,y_test = train_test_split(X,y, test_size=0.3)

from sklearn.preprocessing import StandardScaler

from sklearn.preprocessing import StandardScaler  
scaler = StandardScaler()  
scaler.fit(X_train)

X_train = scaler.transform(X_train)  
X_test = scaler.transform(X_test)

from sklearn.neighbors import KNeighborsClassifier 
classifier = KNeighborsClassifier(n_neighbors=5)

classifier.fit(X_train, y_train) 

y_pred = classifier.predict(X_test)

from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
print("Matriz Confusa: ")
print(confusion_matrix(y_test, y_pred), "\n")  
print("Relatório de classificação: \n", classification_report(y_test, y_pred))  
print('Acurácia do modelo: ' , accuracy_score(y_test, y_pred))

for i in range(1, 10):  
    knn = KNeighborsClassifier(n_neighbors=i)
    knn.fit(X_train, y_train)
    pred_i = knn.predict(X_test)
    error.append(np.mean(pred_i != y_test))
    
plt.figure(figsize=(12, 6))  
plt.plot(range(1, 10), error, color='red', linestyle='dashed', marker='o',  
         markerfacecolor='blue', markersize=10)
plt.title('Error Rate K Value')  
plt.xlabel('K Value')  
plt.ylabel('Mean Error')

from sklearn.neighbors import KNeighborsClassifier  
classifier = KNeighborsClassifier(n_neighbors=1)  
classifier.fit(X_train, y_train)

y_pred = classifier.predict(X_test)

from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

print("Matriz Confusa: ")
print(confusion_matrix(y_test, y_pred), "\n")  
print("Relatório de classificação: \n", classification_report(y_test, y_pred))  
print('Acurácia do modelo: ' , accuracy_score(y_test, y_pred))
